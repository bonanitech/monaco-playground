/* eslint-disable */
/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from https://raw.githubusercontent.com/follesoe/sublime-racket/master/Racket.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

var oop = require("../oop");
var TextHighlightRules = require("../text_highlight_rules").TextHighlightRules;

var RacketHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: ["text", "string.quoted.double.source.racket"],
            regex: /([^\\])(\"[^\"]*\")/
        }, {
            token: [
                "meta.variable.source.racket",
                "keyword.source.racket",
                "meta.variable.source.racket",
                "entity.name.variable.source.racket",
                "meta.variable.source.racket"
            ],
            regex: /(\()(define)(\s+)([a-zA-Z0-9_\-?\+^]+)(\s*)/
        }, {
            token: [
                "meta.function.source.racket",
                "keyword.source.racket",
                "meta.function.source.racket",
                "entity.name.function",
                "meta.function.source.racket"
            ],
            regex: /(\()(define)(\s+\()([a-zA-Z0-9_\-?\+^]+)(\s*)/
        }, {
            token: [
                "meta.struct.source.racket",
                "keyword.source.racket",
                "meta.struct.source.racket",
                "entity.name.type",
                "meta.struct.source.racket"
            ],
            regex: /(\()(struct)(\s+)([a-zA-Z0-9_\-?\+^]+)(\s+)/
        }, {
            token: [
                "meta.keywords.source.racket",
                "keyword.source.racket",
                "meta.keywords.source.racket"
            ],
            regex: /([\s\(])(if|lambda|cond|define|type-case|let|letrec|let!|\#lang|require|test|else|first|rest|define-type|define-type-alias|define-struct|not|local|error|lang)([\s\)])/
        }, {
            token: [
                "text",
                "constant.language.source.racket",
                "text"
            ],
            regex: /([\s\(])(true|false|empty|null)([\s\)])/
        }, {
            token: [
                "text",
                "constant.language.source.racket",
                "text"
            ],
            regex: /([\s\(])(#t|#f)([\s\)])/
        }, {
            token: "constant.language.source.racket",
            regex: /#\\[a-zA-Z0-9_\-?\+\.\!\"]+/
        }, {
            token: "constant.numeric.integer.source.racket",
            regex: /\b(?:0|[1-9][0-9_]*)\b/
        }, {
            token: "comment.line.documentation.source.racket",
            regex: /;/,
            push: [{
                token: "comment.line.documentation.source.racket",
                regex: /$/,
                next: "pop"
            }, {
                defaultToken: "comment.line.documentation.source.racket"
            }]
        }, {
            token: "comment.block.source.racket",
            regex: /#\|/,
            push: [{
                token: "comment.block.source.racket",
                regex: /\|#/,
                next: "pop"
            }, {
                defaultToken: "comment.block.source.racket"
            }]
        }]
    }
    
    this.normalizeRules();
};

RacketHighlightRules.metaData = {
    fileTypes: ["rkt"],
    name: "Racket",
    scopeName: "source.racket"
}


oop.inherits(RacketHighlightRules, TextHighlightRules);

export default RacketHighlightRules;
